<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-3.0.xsd">
		
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/datasource.properties</value>
			</list>
		</property>  
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="maxActive" value="${ds1.maxActive}" />
		<property name="maxIdle" value="${ds1.maxIdle}" />
		<property name="maxWait" value="${ds1.maxWait}" />
		<property name="testWhileIdle" value="${ds1.testWhileIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${ds1.timeBetweenEvictionRunsMillis}" />
		<property name="validationQuery" value="${ds1.validationQuery}" />
		<property name="removeAbandoned" value="${ds1.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${ds1.removeAbandonedTimeout}" />
		<property name="driverClassName" value="${ds1.driverClassName}" />
		<property name="url" value="${ds1.url}" />
		<property name="username" value="${ds1.username}" />
		<property name="password" value="${ds1.password}" />
	</bean>
	
	<!-- 定时任务 -->
	<!-- 
	<bean id="quarzDemoTask" class="com.huawei.act.task.DemoTask"
		scope="prototype" />
	 -->
	<!-- <task:scheduled-tasks>
		<task:scheduled ref="quarzDemoTask" method="execute"
			cron="0 */30 * * * ?" />
	</task:scheduled-tasks> -->

	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:com/yinqiao/af/mapper/**/*.xml" />
		<property name="typeAliasesPackage" value="com.yinqiao.af.model" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yinqiao.af.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- Spring aop事务管理 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.yinqiao.af.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<bean class="com.yinqiao.af.AppLoader" init-method="init"/>
</beans>